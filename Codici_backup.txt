version: '3.7'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    platform: linux/arm64
    restart: 'no'
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.9.0
    platform: linux/arm64
    restart: 'no'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

volumes:
  elasticsearch-data-volume:
    driver: local




APIweather PYTHON



import requests

# La tua chiave API di WeatherAPI.com
api_key = 'baa67000bbc64e51a30100644252401'

# Lista delle località di interesse
locations = [
    'Catania', 'Acireale', 'Misterbianco', 'Paternò', 'Gravina di Catania', 
    'Mascalucia', 'Ragalna', 'Adrano', 'Nicolosi', 'Aci Castello'
]

# Funzione per ottenere e stampare le informazioni meteorologiche
def get_weather(location):
    url = f'http://api.weatherapi.com/v1/current.json?key={api_key}&q={location}&lang=it'
    try:
        response = requests.get(url)
        response.raise_for_status()  # Solleva un'eccezione per errori HTTP
        data = response.json()
        
        # Estrazione dei dati meteorologici
        city = data['location']['name']
        temperature = data['current']['temp_c']
        condition = data['current']['condition']['text']
        wind_kph = data['current']['wind_kph']
        wind_dir = data['current']['wind_dir']
        pressure_mb = data['current']['pressure_mb']
        humidity = data['current']['humidity']
        cloud = data['current']['cloud']
        feelslike_c = data['current']['feelslike_c']
        visibility_km = data['current']['vis_km']
        
        # Stampa delle informazioni meteorologiche
        print(f"\nInformazioni meteorologiche per {city}:")
        print(f"- Temperatura: {temperature}°C")
        print(f"- Condizione: {condition}")
        print(f"- Temperatura percepita: {feelslike_c}°C")
        print(f"- Vento: {wind_kph} km/h, direzione {wind_dir}")
        print(f"- Pressione: {pressure_mb} mb")
        print(f"- Umidità: {humidity}%")
        print(f"- Nuvolosità: {cloud}%")
        print(f"- Visibilità: {visibility_km} km")
        
    except requests.exceptions.HTTPError as http_err:
        print(f"Errore HTTP per {location}: {http_err}")
    except Exception as err:
        print(f"Errore per {location}: {err}")

# Itera su ciascuna località e ottiene le informazioni meteorologiche
for location in locations:
    get_weather(location)